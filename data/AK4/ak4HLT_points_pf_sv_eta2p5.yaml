selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   >-
   (np.abs(jet_eta)<2.5) & (jet_pt>30) & (jet_pt<1000) & (event%7!=0)
   & ( (jet_hflav>0) | ((jet_hflav==0) & (np.abs(jet_pflav)!=4) & (np.abs(jet_pflav)!=5)) )
   & ( ~((jet_genmatch_pt>0) & (jet_hflav==0) & (jet_pflav==0)) )
   & ( (jet_genmatch_pt>0) )

test_time_selection:
   # (np.abs(jet_eta)<4.7) & (jet_pt>15) & (jet_pt<1000) & (event%7==0)
   # (np.abs(jet_eta)<4.7) & (jet_pt>15) & (jet_pt<1000)
   (np.abs(jet_eta)<2.5) & (jet_pt>30) & (jet_pt<1000) & (event%7==0)
   ##(np.abs(jet_eta)<4.7) & (jet_corr_pt>10) & (jet_corr_pt<1000)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand_mask: awkward.JaggedArray.ones_like(jet_pfcand_etarel)
   sv_mask: awkward.JaggedArray.ones_like(jet_sv_deta)
   #pfcand_mask: awkward.JaggedArray.ones_like(pfcand_etarel)
   #sv_mask: awkward.JaggedArray.ones_like(sv_etarel)
   #label_b:     (jet_genmatch_pt>0) & (jet_nbhad==1)
   #label_bb:    (jet_genmatch_pt>0) & (jet_nbhad>1)
   label_b:    (jet_genmatch_pt>0) & (jet_nbhad>0)
   #label_c:     (jet_genmatch_pt>0) & (jet_nbhad==0) & (jet_nchad==1)
   #label_cc:    (jet_genmatch_pt>0) & (jet_nbhad==0) & (jet_nchad>1)
   label_c:    (jet_genmatch_pt>0) & (jet_nbhad==0) & (jet_nchad>0)
   label_udsg:   (jet_genmatch_pt>0) & (jet_hflav==0) & ((np.abs(jet_pflav)>0) & (np.abs(jet_pflav)<4) | (jet_pflav==21) )
   #label_uds:   (jet_genmatch_pt>0) & (jet_hflav==0) & (np.abs(jet_pflav)>0) & (np.abs(jet_pflav)<4)
   #label_g:     (jet_genmatch_pt>0) & (jet_hflav==0) & (jet_pflav==21)
   #label_undef: (jet_genmatch_pt>0) & (jet_hflav==0) & (jet_pflav==0)
   #label_pu:    (jet_genmatch_pt<=0)
   label_catB: (jet_genmatch_pt>0) & (jet_hflav==5)
   label_catC: (jet_genmatch_pt>0) & (jet_hflav==4)


preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   pf_points:
      length: 50
      vars: 
         - [jet_pfcand_etarel, null]
         - [jet_pfcand_dphi, null]
         #- [pfcand_phirel, null]
   pf_features:
      length: 50
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [jet_pfcand_pt_log, 0.8, 0.7]
         - [jet_pfcand_energy_log, 1.2, 0.6]
         - [jet_pfcand_etarel, null]
         - [jet_pfcand_dphi, null]
         #- [jet_pfcand_phirel, null]
         - [jet_pfcand_eta, 0., 1.2]
         - [jet_pfcand_charge, null]
         - [jet_pfcand_frompv, 4, 0.3] # check standarization
         - [jet_pfcand_nlostinnerhits, null]
         - [jet_pfcand_track_chi2, 5, 0.2]
         - [jet_pfcand_track_qual, 0, 0.2]
         - [jet_pfcand_dz, 0, 150]
         - [jet_pfcand_dzsig, 0, 0.7]
         - [jet_pfcand_dxy, 0, 270]
         - [jet_pfcand_dxysig, 1.1]
         #- [jet_pfcand_btagEtaRel, 2.1, 0.5] 
         - [jet_pfcand_pperp_ratio, 0, 1]
         - [jet_pfcand_ppara_ratio, 0, 1]
         - [jet_pfcand_trackjet_d3d, 0, 90]
         - [jet_pfcand_trackjet_d3dsig, 0, 0.5]
         - [jet_pfcand_trackjet_dist, 0, 50]
   pf_mask:
      length: 50
      vars: 
         - [pfcand_mask, null]
   sv_points:
      length: 5
      vars:
         - [jet_sv_deta, null]
         - [jet_sv_dphi, null]
   sv_features:
      length: 5
      vars:
         - [jet_sv_pt_log, 2.8, 0.8] # for the moment we save just the jet_sv_pt, is there any easy way to just convert that here?
         - [jet_sv_mass, 1.1, 0.6]
         - [jet_sv_deta, null]
         - [jet_sv_dphi, null]
         - [jet_sv_eta, 0., 1.2] # missing the SV eta in ntuples, need to add it
         - [jet_sv_ntrack, 3, 0.5]
         - [jet_sv_chi2, 0.7, 0.7]
         - [jet_sv_dxy, 0.2, 0.6]
         - [jet_sv_dxysig, 5, 0.03]
         - [jet_sv_d3d, 0.35, 0.4]
         - [jet_sv_d3dsig, 5, 0.03]
   sv_mask:
      length: 5
      vars:
         - [sv_mask, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [label_b, label_c, label_udsg] # remove PU label
   #value: [label_b, label_bb, label_c, label_cc, label_uds, label_g, label_undef] # remove PU label
   ##value: [label_b, label_bb, label_c, label_cc, label_uds, label_g, label_undef, label_pu]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genmatch_sdmass, fj_gen_mass) 

observers:
   - event
#   - jet_no
  # - jet_corr_pt
   - jet_pt
   - jet_eta
   - jet_phi
   - jet_hflav
   - jet_pflav
   - jet_nbhad
   - jet_nchad
   - jet_genmatch_pt
   - jet_genmatch_eta
   - jet_genmatch_phi
#   - jet_genmatch_deltaR
#   - npfcands
#   - pfDeepFlavourJetTags_probb
#   - pfDeepFlavourJetTags_probbb
#   - pfDeepFlavourJetTags_problepb
#   - pfDeepFlavourJetTags_probc
#   - pfDeepFlavourJetTags_probuds
#   - pfDeepFlavourJetTags_probg
#   - jet_qgl
#   - jet_puId

monitor_variables:
   # - jet_pt
   # - jet_eta
   # - jet_hflav
   # - jet_pflav
   # - jet_nbhad
   # - jet_nchad
   # - jet_genmatch_pt

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      # np.round(np.exp(np.linspace(np.log(15), np.log(1000), 9))).astype('int').tolist()
      # jet_pt: [15, 25, 43, 72, 122, 207, 350, 592, 1000]
      # np.round(np.exp(np.linspace(np.log(15), np.log(1000), 16))).astype('int').tolist()
      jet_pt: [30, 38, 48, 60, 76, 97, 122, 154, 195, 246, 311, 393, 496, 627, 792, 1000]
      jet_eta: [-2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5]
      #jet_pt: [15, 20, 26, 35, 46, 61, 80, 106, 141, 186, 247, 326, 432, 571, 756, 1000]
      #jet_eta: [-4.7, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 4.7]
   reweight_classes: [label_catB, label_catC, label_udsg]
   #reweight_classes: [label_catB, label_catC, label_uds, label_g, label_undef, label_pu]
   class_weights: [1, 1, 2]
   #class_weights: [1, 1, 2.5, 5, 0.15, 1]
   reweight_threshold: 15
   reweight_hists:

